test <- mod_results[splits,]
train <- mod_results[-splits,]
model <- glm(result~., family=binomial(link='logit'), data = train)
summary(model)
test.results <- predict(model,
newdata=subset(test, select = c(1:7)),
type = 'response')
test.results <- ifelse(test.results > 0.5, 1.0, 0)
accuracy.error <- mean(test.results != test$result)
print(paste('Accuracy', 1-accuracy.error))
precision <- sum(test.results == test$result
& test$result == 0)/sum(test.results == 0)
recall <- sum(test.results == test$result
& test$result == 0)/sum(test$result == 0)
print(paste('Precision', precision))
print(paste('Recall', recall))
mod_results <- subset(mod_results, select = -BankCardUtilization)
mod_results <- subset(mod_results, select = -BankcardUtilization)
splits <- sample(1:nrow(mod_results), size = 0.2*nrow(mod_results))
test <- mod_results[splits,]
train <- mod_results[-splits,]
model <- glm(result~., family=binomial(link='logit'), data = train)
summary(model)
test.results <- predict(model,
newdata=subset(test, select = c(1:7)),
type = 'response')
test.results <- ifelse(test.results > 0.75, 1.0, 0)
accuracy.error2 <- mean(test.results != test$result)
print(paste('Accuracy (new model)', 1-accuracy.error))
test.results <- predict(model,
newdata=subset(test, select = c(1:6)),
type = 'response')
test.results <- ifelse(test.results > 0.75, 1.0, 0)
accuracy.error2 <- mean(test.results != test$result)
print(paste('Accuracy (new model)', 1-accuracy.error))
precision2 <- sum(test.results == test$result
& test$result == 0)/sum(test.results == 0)
recall2 <- sum(test.results == test$result
& test$result == 0)/sum(test$result == 0)
print(paste('Precision (new model)', precision2))
print(paste('Recall (new model)', recall2))
View(train)
model2 <- glm(result~., family=binomial(link='logit'), data = train[1, 6])
model2 <- glm(result~., family=binomial(link='logit'), data = train[1, 6, 7])
model2 <- glm(result~., family=binomial(link='logit'), data = subset(train, select = c(1, 6, 7)))
summary(model2)
test.results3 <- predict(model2,
newdata=subset(test, select = c(1, 6)),
type = 'response')
test.results3 <- ifelse(test.results3 > 0.75, 1.0, 0)
accuracy.error3 <- mean(test.results3 != test$result)
print(paste('Accuracy (new model)', 1-accuracy.error3))
precision3 <- sum(test.results3 == test$result
& test$result == 0)/sum(test.results3 == 0)
recall3 <- sum(test.results3 == test$result
& test$result == 0)/sum(test$result == 0)
print(paste('Precision (new model)', precision3))
print(paste('Recall (new model)', recall3))
test.results4 <- ifelse(test.results4 > 0.7, 1.0, 0)
test.results4 <- ifelse(test.results3 > 0.7, 1.0, 0)
accuracy.error4 <- mean(test.results4 != test$result)
print(paste('Accuracy (new model)', 1-accuracy.error4))
precision4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test.results4 == 0)
recall4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test$result == 0)
print(paste('Precision (new model)', precision4))
print(paste('Recall (new model)', recall4))
test.results4 <- ifelse(test.results3 > 0.6, 1.0, 0)
accuracy.error4 <- mean(test.results4 != test$result)
print(paste('Accuracy (new model)', 1-accuracy.error4))
precision4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test.results4 == 0)
recall4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test$result == 0)
print(paste('Precision (new model)', precision4))
print(paste('Recall (new model)', recall4))
test.results4 <- ifelse(test.results3 > 0.5, 1.0, 0)
accuracy.error4 <- mean(test.results4 != test$result)
print(paste('Accuracy (new model)', 1-accuracy.error4))
precision4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test.results4 == 0)
recall4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test$result == 0)
print(paste('Precision (new model)', precision4))
print(paste('Recall (new model)', recall4))
test.results4 <- predict(model3,
newdata=subset(test, select = c(1, 6)),
type = 'response')
model3 <- glm(result~., family=binomial(link='logit'), data = subset(train, select = c(1, 6, 7)))
test.results4 <- predict(model3,
newdata=subset(test, select = c(1, 6)),
type = 'response')
test.results4 <- ifelse(test.results4 > 0.6, 1.0, 0)
accuracy.error4 <- mean(test.results4 != test$result)
print(paste('Accuracy (new model)', 1-accuracy.error4))
precision4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test.results4 == 0)
recall4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test$result == 0)
print(paste('Precision (new model)', precision4))
print(paste('Recall (new model)', recall4))
test.results4 <- predict(model3,
newdata=subset(test, select = c(1, 6)),
type = 'response')
test.results4 <- ifelse(test.results4 > 0.7, 1.0, 0)
accuracy.error4 <- mean(test.results4 != test$result)
print(paste('Accuracy (new model)', 1-accuracy.error4))
precision4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test.results4 == 0)
recall4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test$result == 0)
print(paste('Precision (new model)', precision4))
print(paste('Recall (new model)', recall4))
test.results4 <- predict(model3,
newdata=subset(test, select = c(1, 6)),
type = 'response')
test.results4 <- ifelse(test.results4 > 0.6, 1.0, 0)
accuracy.error4 <- mean(test.results4 != test$result)
print(paste('Accuracy (new model)', 1-accuracy.error4))
precision4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test.results4 == 0)
recall4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test$result == 0)
print(paste('Precision (new model)', precision4))
print(paste('Recall (new model)', recall4))
test.results4 <- predict(model3,
newdata=subset(test, select = c(1, 6)),
type = 'response')
test.results4 <- ifelse(test.results4 > 0.5, 1.0, 0)
accuracy.error4 <- mean(test.results4 != test$result)
print(paste('Accuracy (new model)', 1-accuracy.error4))
precision4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test.results4 == 0)
recall4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test$result == 0)
print(paste('Precision (new model)', precision4))
print(paste('Recall (new model)', recall4))
test.results4 <- predict(model3,
newdata=subset(test, select = c(1, 6)),
type = 'response')
test.results4 <- ifelse(test.results4 > 0.65, 1.0, 0)
accuracy.error4 <- mean(test.results4 != test$result)
print(paste('Accuracy (new model)', 1-accuracy.error4))
precision4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test.results4 == 0)
recall4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test$result == 0)
print(paste('Precision (new model)', precision4))
print(paste('Recall (new model)', recall4))
```{r}
test.results4 <- predict(model3,
newdata=subset(test, select = c(1, 6)),
type = 'response')
test.results4 <- ifelse(test.results4 > 0.6, 1.0, 0)
accuracy.error4 <- mean(test.results4 != test$result)
print(paste('Accuracy (new model)', 1-accuracy.error4))
precision4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test.results4 == 0)
recall4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test$result == 0)
print(paste('Precision (new model)', precision4))
print(paste('Recall (new model)', recall4))
test.results4 <- predict(model3,
newdata=subset(test, select = c(1, 6)),
type = 'response')
test.results4 <- ifelse(test.results4 > 0.7, 1.0, 0)
accuracy.error4 <- mean(test.results4 != test$result)
print(paste('Accuracy (new model)', 1-accuracy.error4))
precision4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test.results4 == 0)
recall4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test$result == 0)
print(paste('Precision (new model)', precision4))
print(paste('Recall (new model)', recall4))
test.results4 <- predict(model3,
newdata=subset(test, select = c(1, 6)),
type = 'response')
test.results4 <- ifelse(test.results4 > 0.65, 1.0, 0)
accuracy.error4 <- mean(test.results4 != test$result)
print(paste('Accuracy (new model)', 1-accuracy.error4))
precision4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test.results4 == 0)
recall4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test$result == 0)
print(paste('Precision (new model)', precision4))
print(paste('Recall (new model)', recall4))
test.results4 <- predict(model3,
newdata=subset(test, select = c(1, 6)),
type = 'response')
test.results4 <- ifelse(test.results4 > 0.68, 1.0, 0)
accuracy.error4 <- mean(test.results4 != test$result)
print(paste('Accuracy (new model)', 1-accuracy.error4))
precision4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test.results4 == 0)
recall4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test$result == 0)
print(paste('Precision (new model)', precision4))
print(paste('Recall (new model)', recall4))
test.results4 <- predict(model3,
newdata=subset(test, select = c(1, 6)),
type = 'response')
test.results4 <- ifelse(test.results4 > 0.69, 1.0, 0)
accuracy.error4 <- mean(test.results4 != test$result)
print(paste('Accuracy (new model)', 1-accuracy.error4))
precision4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test.results4 == 0)
recall4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test$result == 0)
print(paste('Precision (new model)', precision4))
print(paste('Recall (new model)', recall4))
test.results4 <- predict(model3,
newdata=subset(test, select = c(1, 6)),
type = 'response')
test.results4 <- ifelse(test.results4 > 0.7, 1.0, 0)
accuracy.error4 <- mean(test.results4 != test$result)
print(paste('Accuracy (new model)', 1-accuracy.error4))
precision4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test.results4 == 0)
recall4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test$result == 0)
print(paste('Precision (new model)', precision4))
print(paste('Recall (new model)', recall4))
test.results4 <- predict(model3,
newdata=subset(test, select = c(1, 6)),
type = 'response')
test.results4 <- ifelse(test.results4 > 0.699, 1.0, 0)
accuracy.error4 <- mean(test.results4 != test$result)
print(paste('Accuracy (new model)', 1-accuracy.error4))
precision4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test.results4 == 0)
recall4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test$result == 0)
print(paste('Precision (new model)', precision4))
print(paste('Recall (new model)', recall4))
test.results4 <- predict(model3,
newdata=subset(test, select = c(1, 6)),
type = 'response')
test.results4 <- ifelse(test.results4 > 0.7, 1.0, 0)
accuracy.error4 <- mean(test.results4 != test$result)
print(paste('Accuracy (new model)', 1-accuracy.error4))
precision4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test.results4 == 0)
recall4 <- sum(test.results4 == test$result
& test$result == 0)/sum(test$result == 0)
print(paste('Precision (new model)', precision4))
print(paste('Recall (new model)', recall4))
View(mod_loans)
ggplot(aes(x = CreditScoreAvg, y = Rating), data = loans) +
geom_jitter()
ggplot(aes(y = CreditScoreAvg, x = Rating), data = loans) +
geom_jitter()
ggplot(aes(y = CreditScoreAvg, x = Rating), data = loans) +
geom_jitter(alpha = 1/100)
ggplot(aes(x = StatedMonthlyIncome, y = CreditScoreAvg), data = loans) +
geom_scatter(aes(color = Rating))
ggplot(aes(x = StatedMonthlyIncome, y = CreditScoreAvg), data = loans) +
geom_point(aes(color = Rating))
ggplot(aes(x = StatedMonthlyIncome, y = CreditScoreAvg), data = loans) +
geom_point(aes(color = Rating)) +
scale_x_continuous(limits = c(0, 50000))
ggplot(aes(x = StatedMonthlyIncome, y = CreditScoreAvg), data = loans) +
geom_point(aes(color = Rating), alpha = 1/50) +
scale_x_continuous(limits = c(0, 50000))
ggplot(aes(x = StatedMonthlyIncome, y = CreditScoreAvg), data = loans) +
geom_point(aes(color = Rating), alpha = 1/20) +
scale_x_continuous(limits = c(0, 50000))
ggplot(aes(x = StatedMonthlyIncome, y = CreditScoreAvg), data = loans) +
geom_point(aes(color = Rating), alpha = 1/2) +
scale_x_continuous(limits = c(0, 50000))
ggplot(aes(x = DebtToIncomeRatio, y = CreditScoreAvg), data = loans) +
geom_point(aes(color = Rating)) +
scale_x_continuous(limits = c(0,1))
ggplot(aes(x = DebtToIncomeRatio, y = CreditScoreAvg), data = loans) +
geom_point(aes(color = Rating), alpha = 1/2) +
scale_x_continuous(limits = c(0,1))
ggplot(aes(x = BorrowerAPR, y = CreditScoreAvg), data = loans) +
geom_point(aes(color = Rating))
ggplot(aes(x = BorrowerAPR, y = CreditScoreAvg), data = loans) +
geom_point(aes(color = Rating), alpha = 1/2)
ggplot(aes(y = CreditScoreAvg, x = Rating), data = loans) +
geom_jitter(alpha = 1/100) +
labs(title = 'Scatterplot of Loan Rating vs. Avg. Credit Score')
ggplot(aes(y = CreditScoreAvg, x = Rating), data = loans) +
geom_jitter(alpha = 1/100) +
labs(title = 'Scatterplot of Loan Rating vs. Avg. Credit Score')+
guide_legend(override.aes = list(alpha = 1))
ggplot(aes(y = CreditScoreAvg, x = Rating), data = loans) +
geom_jitter(alpha = 1/100) +
labs(title = 'Scatterplot of Loan Rating vs. Avg. Credit Score')+
guide_legend(override.aes = list(alpha = 1))
ggplot(aes(y = CreditScoreAvg, x = Rating), data = loans) +
geom_jitter(alpha = 1/100) +
labs(title = 'Scatterplot of Loan Rating vs. Avg. Credit Score')
ggplot(aes(x = StatedMonthlyIncome, y = CreditScoreAvg), data = loans) +
geom_point(aes(color = Rating), alpha = 1/2) +
scale_x_continuous(limits = c(0, 50000)) +
labs(title = 'Scatterplot of Monthly Income vs Avg. Credit Score') +
guide_legend(override.aes = list(alpha = 1))
ggplot(aes(x = StatedMonthlyIncome, y = CreditScoreAvg), data = loans) +
geom_point(aes(color = Rating), alpha = 1/2) +
scale_x_continuous(limits = c(0, 50000)) +
labs(title = 'Scatterplot of Monthly Income vs Avg. Credit Score') + guide_legend(override.aes = list(alpha = 1))
ggplot(aes(x = StatedMonthlyIncome, y = CreditScoreAvg), data = loans) +
geom_point(aes(color = Rating), alpha = 1/2, guide = guide_legend(override.aes = list(alpha = 1))) +
scale_x_continuous(limits = c(0, 50000)) +
labs(title = 'Scatterplot of Monthly Income vs Avg. Credit Score')
ggplot(aes(x = StatedMonthlyIncome, y = CreditScoreAvg), data = loans) +
geom_point(aes(color = Rating), alpha = 1/2) +
scale_x_continuous(limits = c(0, 50000)) +
labs(title = 'Scatterplot of Monthly Income vs Avg. Credit Score') +
guides(guide = guide_legend(override.aes = list(alpha = 1)))
ggplot(aes(x = StatedMonthlyIncome, y = CreditScoreAvg), data = loans) +
geom_point(aes(color = Rating), alpha = 1/2) +
scale_x_continuous(limits = c(0, 50000)) +
labs(title = 'Scatterplot of Monthly Income vs Avg. Credit Score') +
guides(color = guide_legend(override.aes = list(alpha = 1)))
ggplot(aes(x = DebtToIncomeRatio, y = CreditScoreAvg), data = loans) +
geom_point(aes(color = Rating), alpha = 1/2) +
scale_x_continuous(limits = c(0,1)) +
labs(title = 'Scatterplot of Debt-to-Income Ratio vs. Avg. Credit Score') +
guides(color = guide_legend(override.aes = list(alpha = 1)))
ggplot(aes(x = BorrowerAPR, y = CreditScoreAvg), data = loans) +
geom_point(aes(color = Rating), alpha = 1/2) +
labs(title = 'Scatterplot of APR vs. Avg. Credit Score') +
guides(color = guide_legend(override.aes = list(alpha = 1)))
knitr::opts_chunk$set(echo = TRUE)
#Load in the data
loans <- read.csv('prosperLoanData.csv', na.strings = '')
library(ggplot2)
library(dplyr)
colnames(loans)
table(loans$LoanStatus)
table(loans$CreditGrade)
#Here I find that many of the credit grade (and prosper equivalent)
#Ratings are "". I want to combine them to get rid of this. I will
#do this in a little bit.
loans$Rating <- ifelse(is.na(loans$CreditGrade),
as.character(loans$ProsperRating..Alpha.),
as.character(loans$CreditGrade))
loans$Rating = factor(loans$Rating,
c('AA', 'A', 'B', 'C', 'D', 'E', 'HR', 'NC'))
defaults <- subset(loans, LoanStatus == 'Defaulted')
completed <- subset(loans, LoanStatus == 'Completed')
ggplot(aes(x = Rating), data = defaults) +
geom_bar()
ggplot(aes(x = Rating), data = completed) +
geom_bar()
ggplot(aes(x = EmploymentStatus), data = defaults) +
geom_bar()
ggplot(aes(x = EmploymentStatus), data = completed) +
geom_bar()
#Don't forget to add this to the subsets too
loans$CreditScoreAvg <- (loans$CreditScoreRangeLower + loans$CreditScoreRangeUpper) / 2
defaults <- subset(loans, LoanStatus == 'Defaulted')
completed <- subset(loans, LoanStatus == 'Completed')
ggplot(aes(x = CreditScoreAvg), data = defaults) +
geom_histogram(binwidth = 19)
ggplot(aes(x = CreditScoreAvg), data = completed) +
geom_histogram(binwidth = 19)
mean(subset(defaults, !is.na(CreditScoreAvg))$CreditScoreAvg)
mean(subset(completed, !is.na(CreditScoreAvg))$CreditScoreAvg)
ggplot(aes(x = StatedMonthlyIncome), data = defaults) +
geom_histogram() +
scale_x_continuous(breaks = seq(0, 20000, 1000), limits = c(0, 20000))
ggplot(aes(x = StatedMonthlyIncome), data = completed) +
geom_histogram() +
scale_x_continuous(breaks = seq(0, 20000, 1000), limits = c(0, 20000))
median(subset(defaults, !is.na(StatedMonthlyIncome))$StatedMonthlyIncome)
median(subset(completed, !is.na(StatedMonthlyIncome))$StatedMonthlyIncome)
ggplot(aes(x = DebtToIncomeRatio), data = defaults) +
geom_histogram() +
scale_x_continuous(breaks = seq(0, 1, .1), limits = c(0, 1))
ggplot(aes(x = DebtToIncomeRatio), data = completed) +
geom_histogram() +
scale_x_continuous(breaks = seq(0, 1, .1), limits = c(0, 1))
median(subset(defaults, !is.na(DebtToIncomeRatio))$DebtToIncomeRatio)
median(subset(completed, !is.na(DebtToIncomeRatio))$DebtToIncomeRatio)
ggplot(aes(x = BorrowerAPR), data = defaults) +
geom_histogram(binwidth = .01) +
scale_x_continuous(breaks = seq(0, .5, .05))
ggplot(aes(x = BorrowerAPR), data = completed) +
geom_histogram(binwidth = .01) +
scale_x_continuous(breaks = seq(0, .5, .05))
median(subset(defaults, !is.na(BorrowerAPR))$BorrowerAPR)
median(subset(completed, !is.na(BorrowerAPR))$BorrowerAPR)
ggplot(aes(x = OpenCreditLines), data = defaults) +
geom_histogram(binwidth = 1)
ggplot(aes(x = OpenCreditLines), data = completed) +
geom_histogram(binwidth = 1)
median(subset(defaults, !is.na(OpenCreditLines))$OpenCreditLines)
median(subset(completed, !is.na(OpenCreditLines))$OpenCreditLines)
mean(subset(defaults, !is.na(OpenCreditLines))$OpenCreditLines)
mean(subset(completed, !is.na(OpenCreditLines))$OpenCreditLines)
ggplot(aes(x = IncomeVerifiable), data = defaults) +
geom_bar()
ggplot(aes(x = IncomeVerifiable), data = completed) +
geom_bar()
ggplot(aes(x = BankcardUtilization), data = defaults) +
geom_histogram(binwidth = 0.05) +
scale_x_continuous(breaks = seq(0, 2, 0.1), limits = c(0, 2))
ggplot(aes(x = BankcardUtilization), data = completed) +
geom_histogram(binwidth = 0.05) +
scale_x_continuous(breaks = seq(0, 2, 0.1), limits = c(0, 2))
mean(subset(defaults, !is.na(BankcardUtilization))$BankcardUtilization)
mean(subset(completed, !is.na(BankcardUtilization))$BankcardUtilization)
median(subset(defaults, !is.na(BankcardUtilization))$BankcardUtilization)
median(subset(completed, !is.na(BankcardUtilization))$BankcardUtilization)
wantedcols <- c('LoanStatus', 'Rating', 'CreditScoreAvg',
'OpenCreditLines', 'BankcardUtilization',
'DebtToIncomeRatio', 'StatedMonthlyIncome',
'BorrowerAPR')
mod_loans <- loans[wantedcols]
mod_loans$rating.numeric <- ifelse(mod_loans$Rating == 'AA', 7,
ifelse(mod_loans$Rating == 'A', 6,
ifelse(mod_loans$Rating == 'B', 5,
ifelse(mod_loans$Rating == 'C', 4,
ifelse(mod_loans$Rating == 'D', 3,
ifelse(mod_loans$Rating == 'E', 2,
ifelse(mod_loans$Rating == 'HR',1,                                        0)))))))
mod_loans <- subset(mod_loans, select = -Rating)
mod_results <- subset(mod_loans, LoanStatus == 'Completed' |
LoanStatus == 'Defaulted')
mod_results$result <- ifelse(mod_results$LoanStatus == 'Completed', 1, 0)
mod_results <- subset(mod_results, select = -LoanStatus)
mod_results$CreditScoreAvg[is.na(mod_results$CreditScoreAvg)] <- mean(mod_results$CreditScoreAvg, na.rm=TRUE)
mod_results$OpenCreditLines[is.na(mod_results$OpenCreditLines)] <- mean(mod_results$OpenCreditLines, na.rm=TRUE)
mod_results$BankcardUtilization[is.na(mod_results$BankcardUtilization)] <- median(mod_results$BankcardUtilization, na.rm=TRUE)
mod_results$DebtToIncomeRatio[is.na(mod_results$DebtToIncomeRatio)] <- median(mod_results$DebtToIncomeRatio, na.rm=TRUE)
mod_results$StatedMonthlyIncome[is.na(mod_results$StatedMonthlyIncome)] <- median(mod_results$StatedMonthlyIncome, na.rm=TRUE)
mod_results$BorrowerAPR[is.na(mod_results$BorrowerAPR)] <- mean(mod_results$BorrowerAPR, na.rm=TRUE)
mod_results <- mod_results[complete.cases(mod_results[ , 7]),]
splits <- sample(1:nrow(mod_results), size = 0.2*nrow(mod_results))
test <- mod_results[splits,]
train <- mod_results[-splits,]
model <- glm(result~., family=binomial(link='logit'), data = train)
summary(model)
test.results <- predict(model,
newdata=subset(test, select = c(1:7)),
type = 'response')
test.results <- ifelse(test.results > 0.5, 1.0, 0)
#Calculate to accuracy of our model (how often it's prediction
#matched the actual result)
accuracy.error <- mean(test.results != test$result)
print(paste('Accuracy', 1-accuracy.error))
precision <- sum(test.results == test$result
& test$result == 0)/sum(test.results == 0)
recall <- sum(test.results == test$result
& test$result == 0)/sum(test$result == 0)
print(paste('Precision', precision))
print(paste('Recall', recall))
mod_results <- subset(mod_results, select = -BankcardUtilization)
splits2 <- sample(1:nrow(mod_results), size = 0.2*nrow(mod_results))
test2 <- mod_results[splits2,]
train2 <- mod_results[-splits2,]
model2 <- glm(result~., family=binomial(link='logit'), data = train2)
summary(model2)
test.results2 <- predict(model2,
newdata=subset(test2, select = c(1:6)),
type = 'response')
test.results2 <- ifelse(test.results2 > 0.75, 1.0, 0)
accuracy.error2 <- mean(test.results2 != test2$result)
print(paste('Accuracy (new model)', 1-accuracy.error))
precision2 <- sum(test.results2 == test2$result
& test2$result == 0)/sum(test.results2 == 0)
recall2 <- sum(test.results2 == test2$result
& test2$result == 0)/sum(test2$result == 0)
print(paste('Precision (new model)', precision2))
print(paste('Recall (new model)', recall2))
model3 <- glm(result~., family=binomial(link='logit'), data = subset(train2, select = c(1, 6, 7)))
summary(model3)
test.results3 <- predict(model3,
newdata=subset(test2, select = c(1, 6)),
type = 'response')
test.results3 <- ifelse(test.results3 > 0.75, 1.0, 0)
accuracy.error3 <- mean(test.results3 != test2$result)
print(paste('Accuracy (new model)', 1-accuracy.error3))
precision3 <- sum(test.results3 == test2$result
& test2$result == 0)/sum(test.results3 == 0)
recall3 <- sum(test.results3 == test2$result
& test2$result == 0)/sum(test2$result == 0)
print(paste('Precision (new model)', precision3))
print(paste('Recall (new model)', recall3))
test.results4 <- predict(model3,
newdata=subset(test2, select = c(1, 6)),
type = 'response')
test.results4 <- ifelse(test.results4 > 0.7, 1.0, 0)
accuracy.error4 <- mean(test.results4 != test2$result)
print(paste('Accuracy (new model)', 1-accuracy.error4))
precision4 <- sum(test.results4 == test2$result
& test2$result == 0)/sum(test.results4 == 0)
recall4 <- sum(test.results4 == test2$result
& test2$result == 0)/sum(test2$result == 0)
print(paste('Precision (new model)', precision4))
print(paste('Recall (new model)', recall4))
ggplot(aes(y = CreditScoreAvg, x = Rating), data = loans) +
geom_jitter(alpha = 1/100) +
labs(title = 'Scatterplot of Loan Rating vs. Avg. Credit Score')
ggplot(aes(x = StatedMonthlyIncome, y = CreditScoreAvg), data = loans) +
geom_point(aes(color = Rating), alpha = 1/2) +
scale_x_continuous(limits = c(0, 50000)) +
labs(title = 'Scatterplot of Monthly Income vs Avg. Credit Score') +
guides(color = guide_legend(override.aes = list(alpha = 1)))
ggplot(aes(x = DebtToIncomeRatio, y = CreditScoreAvg), data = loans) +
geom_point(aes(color = Rating), alpha = 1/2) +
scale_x_continuous(limits = c(0,1)) +
labs(title = 'Scatterplot of Debt-to-Income Ratio vs. Avg. Credit Score') +
guides(color = guide_legend(override.aes = list(alpha = 1)))
ggplot(aes(x = BorrowerAPR, y = CreditScoreAvg), data = loans) +
geom_point(aes(color = Rating), alpha = 1/2) +
labs(title = 'Scatterplot of APR vs. Avg. Credit Score') +
guides(color = guide_legend(override.aes = list(alpha = 1)))
