library(ggplot2)
data("diamonds")
?diamonds
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point()
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 1/20)
?diamonds
ggplot(aes(x = x, y = price), data = diamonds) +
geom_point(alpha = 1/20)
with(diamonds, cor.test(x, price))
with(diamonds, cor.test(y, price))
with(diamonds, cor.test(z, price))
ggplot(aes(x = depth, y = price), data = diamonds) +
geom_point(alpha = 1/20)
summary(diamonds$depth)
ggplot(aes(x = depth, y = price), data = diamonds) +
geom_point(alpha = 1/100) +
scale_x_continuous(breaks = seq(40, 80, 2))
with(diamonds, cor.test(depth, price))
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point()
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point() +
coord_cartesian(xlim = quantile(diamonds$carat, probs = 0.9),
ylim = quantile(diamonds$price, probs - 0.9))
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point() +
coord_cartesian(xlim = quantile(diamonds$carat, probs = 0.99),
ylim = quantile(diamonds$price, probs = 0.99))
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point() +
coord_cartesian(xlim = quantile(diamonds$carat, probs = 0.01),
ylim = quantile(diamonds$price, probs = 0.01))
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point() +
coord_cartesian(xlim = quantile(diamonds$carat, probs = 0.99),
ylim = quantile(diamonds$price, probs = 0.99))
quantile(diamonds$carat, probs = 0.99
quantile(diamonds$carat, probs = 0.99)
quantile(diamonds$carat, probs = 0.99)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point() +
coord_cartesian(xlim = c(0,quantile(diamonds$carat, probs = 0.99)),
ylim = c(0,quantile(diamonds$price, probs = 0.99)))
diamonds$volume <- with(diamonds, x*y*z)
View(diamonds)
ggplot(aes(x = volume, y = price), data = diamonds) +
geom_point()
with(subset(diamonds, volume != 0 | volume < 800),
cor.test(volume, price))
with(subset(diamonds, volume != 0 & volume < 800),
cor.test(volume, price))
?geom_smooth
ggplot(aes(x = volume, y = price),
data = subset(diamonds, volume !=0 & volume < 800)                                                 ) +
geom_point(alpha = 1/100) +
geom_smooth(method = 'lm')
ggplot(aes(x = volume, y = price),
data = subset(diamonds, volume !=0 & volume < 800)                                                 ) +
geom_point(alpha = 1/100) +
geom_smooth(method = 'lm') +
coord_cartesian(xlim = c(0, 850))
ggplot(aes(x = volume, y = price),
data = subset(diamonds, volume !=0 & volume < 800)                                                 ) +
geom_point(alpha = 1/20) +
geom_smooth(method = 'lm') +
coord_cartesian(xlim = c(0, 850))
ggplot(aes(x = volume, y = price),
data = subset(diamonds, volume !=0 & volume < 800)                                                 ) +
geom_point(alpha = 1/10) +
geom_smooth(method = 'lm')
library(dplyr)
diamondsByClarity <- diamonds %>%
group_by(clarity) %>%
summarise(mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n())
View(diamondsByClarity)
diamondsByColor <- diamonds %>%
group_by(color) %>%
summarise(mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n())
library(gridExtra)
p1 <- ggplot(aes(x = clarity, y = mean_price), data = diamondsByClarity) +
geom_bar()
p2 <- ggplot(aes(x = color, y = mean_price), data = diamondsByColor) +
geom_bar()
grid.arrange(p1, p2)
library(gridExtra)
grid.arrange(p1, p2)
p1 <- ggplot(aes(x = clarity, y = mean_price), data = diamondsByClarity) +
geom_bar(stat='identity')
p2 <- ggplot(aes(x = color, y = mean_price), data = diamondsByColor) +
geom_bar(stat='identity')
grid.arrange(p1, p2)
setwd("C:/John/Programming/Code/Udacity/Term 2/Unit 7/term7-project")
knitr::opts_chunk$set(echo = TRUE)
loans <- read.csv('prosperLoanData.csv')
library(ggplot2)
library(dplyr)
colnames(loans)
table(loans$LoanStatus)
defaults <- subset(loans, LoanStatus == 'Defaulted')
completed <- subset(loans, LoanStatus == 'Completed')
colnames(loans)
table(loans$CreditGrade)
ggplot(aes(x = CreditGrade), data = defaults) +
geom_histogram()
ggplot(aes(x = CreditGrade), data = defaults) +
geom_bar()
ggplot(aes(x = EmploymentStatus), data = defaults) +
geom_bar()
ggplot(aes(x = CreditGrade), data = loans) +
geom_bar() +
facet_wrap(~LoanStatus)
ggplot(aes(x = EmploymentStatus), data = loans) +
geom_bar() +
facet_wrap(~LoanStatus)
loans$Rating <- ifelse(loans$CreditGrade != NA, loans$CreditGrade,
loans$ProsperRating..Alpha.)
table(loans$Rating)
View(loans)
View(loans)
loans$Rating <- ifelse(loans$CreditGrade != ' ', loans$CreditGrade,
loans$ProsperRating..Alpha.)
table(loans$Rating)
loans$Rating <- paste(loans$CreditGrade, loans$ProsperRating..Alpha.)
View(loans)
defaults <- subset(loans, LoanStatus == 'Defaulted')
completed <- subset(loans, LoanStatus == 'Completed')
ggplot(aes(x = Rating), data = defaults) +
geom_bar() +
facet_wrap(~LoanStatus)
ggplot(aes(x = Rating), data = completed) +
geom_bar()
ggplot(aes(x = Rating), data = defaults) +
geom_bar()
ggsave('defaultrating.png')
ggplot(aes(x = Rating), data = completed) +
geom_bar()
ggsave('completedrating.png')
ggplot(aes(x = Rating), data = defaults) +
geom_bar()
ggplot(aes(x = Rating), data = completed) +
geom_bar()
ggplot(aes(x = Rating), data = completed) +
geom_bar()
ggplot(aes(x = Rating), data = defaults) +
geom_bar()
ggplot(aes(x = EmploymentStatus), data = defaults) +
geom_bar()
ggsave('defaultemployment.png')
ggplot(aes(x = EmploymentStatus), data = completed) +
geom_bar()
ggsave('completedemployment.png')
table(loans$CreditScoreRangeLower)
table(loans$CreditScoreRangeUpper)
loans$CreditScoreAvg <- (loans$CreditScoreRangeLower + loans$CreditScoreRangeUpper) / 2
defaults <- subset(loans, LoanStatus == 'Defaulted')
completed <- subset(loans, LoanStatus == 'Completed')
ggplot(aes(x = CreditScoreAvg), data = defaults) +
geom_histogram()
ggplot(aes(x = CreditScoreAvg), data = defaults) +
geom_histogram(binwidth = 19)
ggsave('defaultcreditscore.png')
ggplot(aes(x = CreditScoreAvg), data = completed) +
geom_histogram(binwidth = 19)
ggsave('completecreditscore.png')
mean(defaults$CreditScoreAvg)
table(defaults$CreditScoreAvg)
View(defaults)
